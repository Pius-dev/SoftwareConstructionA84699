

 Into software
These fundamental notions of the built world found parallels in the 1960s world of software construction. The architecture metaphor for software development, and particularly for programming-in-the-large, originated with Fred Brooks in the 1960s. Brooks himself was a bit skeptical of his own brainchild but, after discussions with Jerry Weinberg, became convinced of its metaphoric value for the software world [6].

Software has strongly embraced this metaphor, both for its casual parallels to programming-in-the-large on one hand and for some of its specific techniques on the other. Software engineering tends to emphasize the former, with the strongest parallels relating to the concerns around the coarse or large structure of software and how it relates to the prominent architectural features in the framing of an edifice in the built world. The pattern discipline [5] is an example of the latter, whose philosophies of local adaptation and piecemeal growth became an alternative to big-up-front-design in the 1990s and flourished in the guise of the agile movement in the ensuing decade









Software construction is a discipline 


Requirememt gathering
Design (activity diagram, class diagram) 
Development
Testing and debugging
maintenance


obj
 Come up with a criteria to determine the good programmers


 Come up with the criteria to determine the good software
(No bebugs,efficent, be fast, maintainable, Easy to use) 

Produce a good software, Good time


challenges.
Large line of code
The requirements keep changing
Large development team

The practices,tools for becoming  a good developer

Different software project models

Advantages and disadvantages of each model

agile, waterfall, 

read about Extreme engineering

In about two paragraphs, explain the history of software construction.


  A proposal documents (not more than 5 pages)
  A requiremets documemts

 
 
